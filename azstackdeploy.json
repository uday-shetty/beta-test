{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "minLength": 3,
            "maxLength": 7,
	    "defaultValue": "swarm",
            "type": "string",
            "metadata": {
                "description": "Prefix used for all resources"
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "Admin username to ssh into VM"
            }
        },
        "adminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Admin password for VM and UCP"
            }
        },
        "hubUsername": {
            "type": "string",
            "metadata": {
                "description": "username for Docker Hub"
            }
        },
        "hubPassword": {
            "type": "securestring",
            "metadata": {
                "description": "password for Docker Hub"
            }
        },
        "ucpVersion": {
            "defaultValue": "3.0.0-beta1",
            "type": "string",
            "metadata": {
                "description": "UCP Version"
            }
        },
        "dtrVersion": {
            "defaultValue": "2.4.0",
            "type": "string",
            "metadata": {
                "description": "DTR Version"
            }
        },
        "dockerVersion": {
            "defaultValue": "test-18.01",
            "type": "string",
            "metadata": {
                "description": "Docker Version"
            }
        },
	"dockerEEurl": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "URL to download Docker EE Version (obtained from https://store.docker.com)"
            }
        },
	"dockerLicense": {
            "metadata": {
                "description": "Upload your Docker Enterprise Edition License Key"
            },
            "type": "SecureString"
        },
        "sshPublicKey": {
            "type": "string",
            "metadata": {
                "description": "SSH public key"
            }
        },
	"managerCount": {
            "defaultValue": 1,
            "type": "int",
            "minValue": 1,
            "maxValue": 1,
            "metadata": {
                "description": "Number of manager nodes"
            }
        },
        "managervmSize": {
	    "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2"
            ],
            "defaultValue": "Standard_D3_v2",
            "type": "string",
            "metadata": {
                "description": "Size of the Manager VM"
            }
        },
        "linuxworkerCount": {
            "defaultValue": 1,
            "type": "int",
	    "minValue": 1,
            "maxValue": 3,
            "metadata": {
                "description": "Number of Linux Worker nodes"
            }
        },
	"linuxworkervmSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2"
            ],
            "defaultValue": "Standard_D2_v2",
            "type": "string",
            "metadata": {
                "description": "Size of the Linux Worker VM"
            }
	},
        "winworkerCount": {
            "defaultValue": 1,
            "type": "int",
	    "minValue": 1,
            "maxValue": 3,
            "metadata": {
                "description": "Number of Windows Worker nodes"
            }
        },
	"winworkervmSize": {
            "allowedValues": [
                "Standard_A0",
                "Standard_A1",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_D1",
                "Standard_D2",
                "Standard_D3",
                "Standard_D4",
                "Standard_D11",
                "Standard_D12",
                "Standard_D13",
                "Standard_D14",
                "Standard_D1_v2",
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D5_v2",
                "Standard_D11_v2",
                "Standard_D12_v2",
                "Standard_D13_v2",
                "Standard_D14_v2"
            ],
            "defaultValue": "Standard_D2_v2",
            "type": "string",
            "metadata": {
                "description": "Size of the Windows Worker VM"
            }
	},
        "dnsFqdnSuffix": {
            "defaultValue": "cloudapp.azure.com",
            "type": "string"
        },
        "artifactBaseUri": {
            "defaultValue": "https://raw.githubusercontent.com/uday-shetty/beta-test/master/",
            "type": "string"
        }
    },
    "variables": {
        "prefix": "[parameters('prefix')]",
        "manager": {
            "vmNamePrefix": "[concat(variables('prefix'), '-mgr')]",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSKU": "16.04-LTS",
            "count": "[parameters('managerCount')]",
            "availabilitySetName": "[concat(variables('prefix'), '_mgr_as')]",
            "lbName": "[concat(variables('prefix'), '_mgr_lb')]",
            "nicNamePrefix": "[concat(variables('prefix'), '_mgr_nic')]",
            "publicIPAddressNameUcp": "[concat(variables('prefix'), '_mgr_ucp_pip')]",
            "publicIPAddressNameDtr": "[concat(variables('prefix'), '_mgr_dtr_pip')]",
            "dnsNameforUcp": "[concat(variables('prefix'),'-ucp-',uniqueString(resourceGroup().id))]",
            "dnsNameforDtr": "[concat(variables('prefix'),'-dtr-',uniqueString(resourceGroup().id))]"
        },
        "manager_sub0": {
            "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('manager').lbName)]",
            "publicIPAddressIDUcp": "[resourceId('Microsoft.Network/publicIPAddresses',variables('manager').publicIPAddressNameUcp)]",
            "publicIPAddressIDDtr": "[resourceId('Microsoft.Network/publicIPAddresses',variables('manager').publicIPAddressNameDtr)]",
            "ucpHostname": "[concat(variables('manager').dnsNameforUcp, '.', resourceGroup().location, '.', parameters('dnsFqdnSuffix'))]",
            "dtrHostname": "[concat(variables('manager').dnsNameforDtr, '.', resourceGroup().location, '.', parameters('dnsFqdnSuffix'))]"
        },
        "manager_sub1": {
            "frontEndIPConfigIDUcp": "[concat(variables('manager_sub0').lbID,'/frontendIPConfigurations/LoadBalancerFrontEndUcp')]",
            "frontEndIPConfigIDDtr": "[concat(variables('manager_sub0').lbID,'/frontendIPConfigurations/LoadBalancerFrontEndDtr')]",
            "lbPoolID": "[concat(variables('manager_sub0').lbID,'/backendAddressPools/BackendPool1')]",
            "lbDtrPoolID": "[concat(variables('manager_sub0').lbID,'/backendAddressPools/BackendPool2')]",
            "lbProbeIDUCP443": "[concat(variables('manager_sub0').lbID,'/probes/ucp443')]",
            "lbProbeIDDTR443": "[concat(variables('manager_sub0').lbID,'/probes/dtr443')]",
            "lbProbeIDDTR80": "[concat(variables('manager_sub0').lbID,'/probes/dtr80')]"
        },
        "linux_worker": {
            "vmNamePrefix": "[concat(variables('prefix'), '-linuxwrk')]",
            "imagePublisher": "Canonical",
            "imageOffer": "UbuntuServer",
            "imageSKU": "16.04-LTS",
            "count": "[parameters('linuxworkerCount')]",
            "availabilitySetName": "[concat(variables('prefix'), '_linux_wrk_as')]",
            "lbName": "[concat(variables('prefix'), '_linux_wrk_lb')]",
            "nicNamePrefix": "[concat(variables('prefix'), '_linux_wrk_nic')]",
            "publicIPAddressName": "[concat(variables('prefix'), '_linux_wrk_pip')]",
            "publicIPAddressDnsName": "[concat(variables('prefix'),'-linuxwrk-',uniqueString(resourceGroup().id))]"
        },
        "linux_worker_sub0": {
            "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('linux_worker').lbName)]",
            "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('linux_worker').publicIPAddressName)]",
	    "appHostname": "[concat(variables('linux_worker').publicIPAddressDnsName, '.', resourceGroup().location, '.', parameters('dnsFqdnSuffix'))]"
        },
        "linux_worker_sub1": {
            "frontEndIPConfigID": "[concat(variables('linux_worker_sub0').lbID,'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
            "lbPoolID": "[concat(variables('linux_worker_sub0').lbID,'/backendAddressPools/BackendPool1')]",
            "lbProbeID80": "[concat(variables('linux_worker_sub0').lbID,'/probes/linuxapp80')]",
            "lbProbeID443": "[concat(variables('linux_worker_sub0').lbID,'/probes/linuxapp443')]",
            "lbProbe8080ID": "[concat(variables('linux_worker_sub0').lbID,'/probes/tcp8080Probe')]",
            "lbProbe8081ID": "[concat(variables('linux_worker_sub0').lbID,'/probes/tcp8081Probe')]",
            "lbProbe8082ID": "[concat(variables('linux_worker_sub0').lbID,'/probes/tcp8082Probe')]"
        },
        "win_worker": {
            "vmNamePrefix": "[concat(variables('prefix'), '-winwrk')]",
            "imagePublisher": "MicrosoftWindowsServer",
            "imageOffer": "WindowsServer",
            "imageSKU": "2016-Datacenter-with-Containers",
            "count": "[parameters('winworkerCount')]",
            "availabilitySetName": "[concat(variables('prefix'), '_win_wrk_as')]",
            "lbName": "[concat(variables('prefix'), '_win_wrk_lb')]",
            "nicNamePrefix": "[concat(variables('prefix'), '_win_wrk_nic')]",
            "publicIPAddressName": "[concat(variables('prefix'), '_win_wrk_pip')]",
            "publicIPAddressDnsName": "[concat(variables('prefix'),'-winwrk-',uniqueString(resourceGroup().id))]"
        },
        "win_worker_sub0": {
            "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('win_worker').lbName)]",
            "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('win_worker').publicIPAddressName)]",
	    "appHostname": "[concat(variables('win_worker').publicIPAddressDnsName, '.', resourceGroup().location, '.', parameters('dnsFqdnSuffix'))]"
        },
        "win_worker_sub1": {
            "frontEndIPConfigID": "[concat(variables('win_worker_sub0').lbID,'/frontendIPConfigurations/LoadBalancerFrontEnd')]",
            "lbPoolID": "[concat(variables('win_worker_sub0').lbID,'/backendAddressPools/BackendPool1')]",
            "lbProbeID80": "[concat(variables('win_worker_sub0').lbID,'/probes/tcpProbe')]",
            "lbProbeID443": "[concat(variables('win_worker_sub0').lbID,'/probes/tcp443Probe')]",
            "lbProbe8080ID": "[concat(variables('win_worker_sub0').lbID,'/probes/tcp8080Probe')]",
            "lbProbe8081ID": "[concat(variables('win_worker_sub0').lbID,'/probes/tcp8081Probe')]",
            "lbProbe8082ID": "[concat(variables('win_worker_sub0').lbID,'/probes/tcp8082Probe')]"
        },
        "storageAccountName": "[concat(variables('prefix'),uniqueString(concat(resourceGroup().id, '0')))]",
        "storageAccountType": "Standard_LRS",
        "storageLocation": "[resourceGroup().location]",
        "managerAddressPrefix": "10.0.0.0/16",
        "subnetName": "Cluster",
        "subnetPrefix": "10.0.144.0/24",
        "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables ('subnetName'))]",
        "publicIPAddressType": "Static",
        "vnetName": "[concat(variables('prefix'), '_vnet')]",
        "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetName'))]",
        "nsgName": "[concat(variables('prefix'), '_nsg')]",
        "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
	"nicName": "[concat(variables('manager').nicNamePrefix, '0')]",
	"scriptDependency": "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('manager').vmNamePrefix, '0'), 'mgr_scriptextension')]",
	"ddcLicense": "[base64(string(parameters('dockerLicense')))]",
        "vhdContainerName": "vhd"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[variables('storageAccountName')]",
            "apiVersion": "2015-06-15",
            "location": "[variables('storageLocation')]",
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('manager').availabilitySetName]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 1,
                "platformFaultDomainCount": 1
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('linux_worker').availabilitySetName]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 1,
                "platformFaultDomainCount": 1
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "[variables('win_worker').availabilitySetName]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "properties": {
                "platformUpdateDomainCount": 1,
                "platformFaultDomainCount": 1
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('manager').publicIPAddressNameUcp]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('manager').dnsNameforUcp]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('manager').publicIPAddressNameDtr]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('manager').dnsNameforDtr]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('linux_worker').publicIPAddressName]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('linux_worker').publicIPAddressDnsName]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "name": "[variables('win_worker').publicIPAddressName]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]",
                "dnsSettings": {
                    "domainNameLabel": "[variables('win_worker').publicIPAddressDnsName]"
                }
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[variables('vnetName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('subnetPrefix')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('subnetName')]",
                        "properties": {
                            "addressPrefix": "[variables('subnetPrefix')]"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "name": "[variables('nsgName')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "securityRules": [
                    {
                        "name": "ssh",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow SSH",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "22",
                            "direction": "Inbound",
                            "priority": 201,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "ucp",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow UCP",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "443",
                            "direction": "Inbound",
                            "priority": 206,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "dtrhttps",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow DTR",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "12391",
                            "direction": "Inbound",
                            "priority": 207,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    },
                    {
                        "name": "dtrhttp",
                        "properties": {
                            "access": "Allow",
                            "description": "Allow DTR",
                            "destinationAddressPrefix": "*",
                            "destinationPortRange": "12392",
                            "direction": "Inbound",
                            "priority": 208,
                            "protocol": "Tcp",
                            "sourceAddressPrefix": "*",
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('manager').nicNamePrefix, copyindex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[variables('manager').count]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.144.', add(5, copyindex()))]",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('manager_sub0').lbID, '/backendAddressPools/BackendPool1')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('manager_sub0').lbID,'/inboundNatRules/default.',copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('manager').lbName)]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('linux_worker').nicNamePrefix, copyindex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[variables('linux_worker').count]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.144.', add(variables('manager').count, add(5, copyindex())))]",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('linux_worker_sub0').lbID, '/backendAddressPools/BackendPool1')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('linux_worker_sub0').lbID,'/inboundNatRules/default.', copyindex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('linux_worker').lbName)]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat(variables('win_worker').nicNamePrefix, copyindex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "nicLoop",
                "count": "[variables('win_worker').count]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('10.0.144.', add(variables('manager').count, add(9, copyindex())))]",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('win_worker_sub0').lbID, '/backendAddressPools/BackendPool1')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('win_worker_sub0').lbID,'/inboundNatRules/default.', copyindex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
                "[concat('Microsoft.Network/loadBalancers/', variables('win_worker').lbName)]"
            ]
        },
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('manager').lbName]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEndUcp",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('manager_sub0').publicIPAddressIDUcp]"
                            }
                        }
                    },
                    {
                        "name": "LoadBalancerFrontEndDtr",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('manager_sub0').publicIPAddressIDDtr]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool1"
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "default.0",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDUcp]"
                            },
                            "frontendPort": 50000,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "default.1",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDUcp]"
                            },
                            "frontendPort": 50001,
                            "protocol": "tcp"
                        }
                    },
                    {
                        "name": "default.2",
                        "properties": {
                            "backendPort": 22,
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDUcp]"
                            },
                            "frontendPort": 50002,
                            "protocol": "tcp"
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "LBRuleUcp",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDUcp]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('manager_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('manager_sub1').lbProbeIDUCP443]"
                            }
                        }
                    },
                    {
                        "name": "LBRuleDtr",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDDtr]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('manager_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 12391,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('manager_sub1').lbProbeIDDTR443]"
                            }
                        }
                    },
                    {
                        "name": "LBRuleDtrhttp",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('manager_sub1').frontEndIPConfigIDDtr]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('manager_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 12392,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('manager_sub1').lbProbeIDDTR80]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "default",
                        "properties": {
                            "intervalInSeconds": 10,
                            "numberOfProbes": 2,
                            "port": 22,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "ucp443",
                        "properties": {
                            "intervalInSeconds": 10,
                            "numberOfProbes": 2,
                            "port": 443,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "dtr443",
                        "properties": {
                            "intervalInSeconds": 10,
                            "numberOfProbes": 2,
                            "port": 12391,
                            "protocol": "Tcp"
                        }
                    },
                    {
                        "name": "dtr80",
                        "properties": {
                            "intervalInSeconds": 10,
                            "numberOfProbes": 2,
                            "port": 12392,
                            "protocol": "Tcp"
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('manager').publicIPAddressNameUcp)]",
                "[concat('Microsoft.Network/publicIPAddresses/', variables('manager').publicIPAddressNameDtr)]"
            ]
        },
	{
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('linux_worker').lbName]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('linux_worker_sub0').publicIPAddressID]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool1"
                    }
                ],
		"inboundNatRules": [
                    {
                        "name": "default.0",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('linux_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50000,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "default.1",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('linux_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50001,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "default.2",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('linux_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50002,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    }
                ],
		"loadBalancingRules": [
                    {
                        "name": "linuxLBRule80",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('linux_worker_sub1').frontEndIPConfigID]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('linux_worker_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('linux_worker_sub1').lbProbeID80]"
                            }
                        }
                    },
		    {
                        "name": "linuxLBRule443",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('linux_worker_sub1').frontEndIPConfigID]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('linux_worker_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('linux_worker_sub1').lbProbeID443]"
                            }
                        }
                    }

                ],
		"probes": [
                    {
                        "name": "linuxapp80",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "linuxapp443",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
		]
	    },
            "dependsOn": [
               	"[concat('Microsoft.Network/publicIPAddresses/', variables('linux_worker').publicIPAddressName)]"
	    ]
	},
        {
            "type": "Microsoft.Network/loadBalancers",
            "name": "[variables('win_worker').lbName]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd",
                        "properties": {
                            "publicIPAddress": {
                                "id": "[variables('win_worker_sub0').publicIPAddressID]"
                            }
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "BackendPool1"
                    }
                ],
                "inboundNatRules": [
                    {
                        "name": "default.0",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('win_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50000,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "default.1",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('win_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50001,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    },
                    {
                        "name": "default.2",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('win_worker_sub1').frontEndIPConfigID]"
                            },
                            "protocol": "tcp",
                            "frontendPort": 50002,
                            "backendPort": 3389,
                            "enableFloatingIP": false
                        }
                    }
                ],
                "loadBalancingRules": [
                    {
                        "name": "winLBRule",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('win_worker_sub1').frontEndIPConfigID]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('win_worker_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 80,
                            "backendPort": 80,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('win_worker_sub1').lbProbeID80]"
                            }
                        }
                    },
                    {
                        "name": "winLBRule443",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[variables('win_worker_sub1').frontEndIPConfigID]"
                            },
                            "backendAddressPool": {
                                "id": "[variables('win_worker_sub1').lbPoolID]"
                            },
                            "protocol": "Tcp",
                            "frontendPort": 443,
                            "backendPort": 443,
                            "enableFloatingIP": false,
                            "idleTimeoutInMinutes": 5,
                            "probe": {
                                "id": "[variables('win_worker_sub1').lbProbeID443]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "tcpProbe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 80,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    },
                    {
                        "name": "tcp443Probe",
                        "properties": {
                            "protocol": "Tcp",
                            "port": 443,
                            "intervalInSeconds": 5,
                            "numberOfProbes": 2
                        }
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Network/publicIPAddresses/', variables('win_worker').publicIPAddressName)]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('manager').vmNamePrefix, copyindex())]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[variables('manager').count]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('manager').availabilitySetName)]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('managervmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('manager').vmNamePrefix, copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": true,
                        "ssh": {
                            "publicKeys": [
                                {
                                    "keyData": "[parameters('sshPublicKey')]",
                                    "path": "[variables('sshKeyPath')]"
                                }
                            ]
                        }
                    }
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('manager').imagePublisher]",
                        "offer": "[variables('manager').imageOffer]",
                        "sku": "[variables('manager').imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdiskmgr",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('vhdContainerName'),'/',variables('manager').vmNamePrefix, copyIndex(),'-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('manager').nicNamePrefix, copyindex()))]",
                            "properties": {
                                "primary": true
                            }
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "false"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('manager').nicNamePrefix, copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('manager').availabilitySetName)]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('linux_worker').vmNamePrefix, copyindex())]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[variables('linux_worker').count]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('linux_worker').availabilitySetName)]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('linuxworkervmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('linux_worker').vmNamePrefix, copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('linux_worker').imagePublisher]",
                        "offer": "[variables('linux_worker').imageOffer]",
                        "sku": "[variables('linux_worker').imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdiskwrk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('vhdContainerName'),'/',variables('linux_worker').vmNamePrefix, copyIndex(),'-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('linux_worker').nicNamePrefix, copyindex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "false"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('linux_worker').nicNamePrefix, copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('linux_worker').availabilitySetName)]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat(variables('win_worker').vmNamePrefix, copyindex())]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[variables('win_worker').count]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('win_worker').availabilitySetName)]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('winworkervmSize')]"
                },
                "osProfile": {
                    "computerName": "[concat(variables('win_worker').vmNamePrefix, copyIndex())]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "[variables('win_worker').imagePublisher]",
                        "offer": "[variables('win_worker').imageOffer]",
                        "sku": "[variables('win_worker').imageSKU]",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdiskwrk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), '2015-06-15').primaryEndpoints.blob, variables('vhdContainerName'),'/',variables('win_worker').vmNamePrefix, copyIndex(),'-osdisk.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": []
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('win_worker').nicNamePrefix, copyindex()))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": "false"
                    }
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
                "[concat('Microsoft.Network/networkInterfaces/', variables('win_worker').nicNamePrefix, copyindex())]",
                "[concat('Microsoft.Compute/availabilitySets/', variables('win_worker').availabilitySetName)]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('manager').vmNamePrefix, copyIndex(), '/mgr_scriptextension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VirtualMachineScriptExtensionLoop",
                "count": "[variables('manager').count]"
            },
            "tags": {
                "displayName": "[concat(variables('prefix'), '_mgr_', 'extension')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": "true",
                "settings": {
                    "fileUris": [
                        "[concat(parameters('artifactBaseUri'), 'interfaces')]",
                        "[concat(parameters('artifactBaseUri'), 'set-static-ip.sh')]",
                        "[concat(parameters('artifactBaseUri'), 'install-dockeronenode.sh')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('bash install-dockeronenode.sh ', variables('manager_sub0').ucpHostname, ' ', variables('manager_sub0').dtrHostname, ' ', parameters('adminPassword'), ' ', parameters('ucpVersion'), ' ', parameters('dtrVersion'), ' ', parameters('dockerVersion'), ' ', parameters('dockerEEurl'), ' ', variables('ddcLicense'), ' ', variables('linux_worker_sub0').appHostname, ' ', reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress)]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('manager').vmNamePrefix, copyindex())]",
		"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('linux_worker').vmNamePrefix, copyIndex(), '/linuxwrk_scriptextension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VirtualMachineScriptExtensionLoop",
                "count": "[variables('linux_worker').count]"
            },
            "tags": {
                "displayName": "[concat(variables('prefix'), '_linuxwrk_', 'extension')]"
            },
            "properties": {
		"publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.5",
                "autoUpgradeMinorVersion": "true",
                "settings": {
                    "fileUris": [
                        "[concat(parameters('artifactBaseUri'), 'configure-linux_worker.sh')]"
                    ]
                },
                "protectedSettings": {
			 "commandToExecute": "[concat('bash configure-linux_worker.sh ', variables('manager_sub0').ucpHostname, ' ', parameters('ucpVersion'), ' ', parameters('dockerVersion'), ' ', parameters('dockerEEurl'), ' ', reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress, ' ', parameters('hubUsername'), ' ', parameters('hubPassword'))]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('linux_worker').vmNamePrefix, copyindex())]",
		"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
		"[variables('scriptDependency')]"
            ]
	},
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(variables('win_worker').vmNamePrefix, copyIndex(), '/winwrk_scriptextension')]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "VirtualMachineScriptExtensionLoop",
                "count": "[variables('win_worker').count]"
            },
            "tags": {
                "displayName": "[concat(variables('prefix'), '_winwrk_', 'extension')]"
            },
            "properties": {
                "publisher": "Microsoft.Compute",
                "type": "CustomScriptExtension",
                "typeHandlerVersion": "1.8",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "fileUris": [
                        "[concat(parameters('artifactBaseUri'), 'configure-win_worker.ps1')]"
                    ]
                },
                "protectedSettings": {
                    "commandToExecute": "[concat('powershell.exe -ExecutionPolicy Unrestricted -File configure-win_worker.ps1', ' -DockerVersion ', parameters('dockerVersion'), ' -UcpVersion ', parameters('ucpVersion'), ' -UCPFQDN ', variables('manager_sub0').ucpHostname, ' -LeaderIP ', reference(variables('nicName')).ipConfigurations[0].properties.privateIPAddress)]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('win_worker').vmNamePrefix, copyindex())]",
		"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
		"[variables('scriptDependency')]"
            ]
        }
    ],
    "outputs": {
        "mgr_ucp_pip": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('manager').publicIPAddressNameUcp)).ipAddress]"
        },
        "UCPLoginURL": {
            "type": "string",
            "value": "[concat('https://', variables('manager_sub0').ucpHostname)]"
        },
        "mgr_dtr_pip": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('manager').publicIPAddressNameDtr)).ipAddress]"
        },
        "DTRLoginURL": {
            "type": "string",
            "value": "[concat('https://', variables('manager_sub0').dtrHostname)]"
        },
        "linux_app_pip": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('linux_worker').publicIPAddressName)).ipAddress]"
        },
        "LinuxAppURL": {
            "type": "string",
            "value": "[concat('http://', variables('linux_worker_sub0').appHostname)]"
        },
        "win_app_pip": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', variables('win_worker').publicIPAddressName)).ipAddress]"
        },
        "WindowsAppURL": {
            "type": "string",
            "value": "[concat('http://', variables('win_worker_sub0').appHostname)]"
        },
        "masterPrivateIP": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))).ipConfigurations[0].properties.privateIPAddress]"
        }
    }
}
